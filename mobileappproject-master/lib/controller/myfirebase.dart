import 'package:firebase_auth/firebase_auth.dart';
import 'package:myfashionapp/model/reviews.dart';
import 'package:myfashionapp/model/storeproducts.dart';
import '../model/user.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../model/storeproducts.dart';
class MyFirebase
{ 
  
 static Future<String> registerButton({String email,String password})async
  {
    AuthResult auth=await FirebaseAuth.instance.createUserWithEmailAndPassword(
      email: email,
      password: password,
    );
    return auth.user.uid;
  }
  static void createProfile(User user) async
  {
await Firestore.instance.collection(User.PROFILE_COLLECTION)
.document(user.uid) //name of doc same as uid
.setData(user.serialize()); //what we store is defined by this
  }
  //for login
  static Future<String> login({String email,String password}) async{
AuthResult auth=await FirebaseAuth.instance.signInWithEmailAndPassword(
email: email,
password: password
);

return auth.user.uid;
  }
  //rrading user profile
  static Future<User> readProfile(String uid) async{
   DocumentSnapshot doc= await Firestore.instance.collection(User.PROFILE_COLLECTION)
    .document(uid).get();
    return User.deserialize(doc.data);
  }
  static void signOut()
  {
    FirebaseAuth.instance.signOut();
  }

static Future<String> addReview(Reviews reviews) async
 {
   DocumentReference ref=await Firestore.instance.collection(Reviews.REVIEWSCOLLECTION)
   .add(reviews.serialize());
  return ref.documentID;
  }
  
  
  static Future<String> addProduct(StoreProducts storeProducts) async
  {
    
    DocumentReference ref=await Firestore.instance.collection(StoreProducts.PRODUCTCOLLECTION)
    .add(storeProducts.serialize());
    return ref.documentID;
     //Generated by firestore as primary
    
  }
  
  static Future<List<StoreProducts>>getProducts(String email) async
  {
    QuerySnapshot querySnapshot=await Firestore.instance.collection(StoreProducts.PRODUCTCOLLECTION)
    //.where(StoreProducts.SHAREDWITH,isEqualTo:[])
    //.where(StoreProducts.ADDEDBY,isEqualTo:email)
    .getDocuments();
var productlist=<StoreProducts>[];
if(querySnapshot ==null || querySnapshot.documents.length==0)
{
  return productlist;
}
for (DocumentSnapshot doc in querySnapshot.documents)
{
  productlist.add(StoreProducts.deserialize(doc.data,doc.documentID));
}
return productlist;
  }
  
  
 Future sendEmail(String email) async{
  return FirebaseAuth.instance.sendPasswordResetEmail(email: email);
 }
 static Future<void> deleteProducts(StoreProducts storeProducts) async
 {
await Firestore.instance.collection(StoreProducts.PRODUCTCOLLECTION)
.document(storeProducts.documentId).delete();
 }
 static Future<List<Reviews>>getReviews() async{
  QuerySnapshot querySnapshot= await Firestore.instance.collection(Reviews.REVIEWSCOLLECTION)
 // .where(Reviews.MYREVIEWS,isEqualTo:documentId)
   .getDocuments();
   var reviewslist=<Reviews>[];
   if(querySnapshot==null || querySnapshot.documents.length==0)
   {
     return reviewslist;
   }
   for(DocumentSnapshot doc in querySnapshot.documents)
   {
     reviewslist.add(Reviews.deserialize(doc.data, doc.documentID));
   }
   return reviewslist;
 }
//  static Future<List<Quantity>>getQuantity(String email) async{
//   QuerySnapshot querySnapshot= await Firestore.instance.collection(Quantity.QUANTITYCOLLECTION)
//  // .where(Reviews.MYREVIEWS,isEqualTo:documentId)
//    .getDocuments();
//    var quantitylist=<Quantity>[];
//    if(querySnapshot==null || querySnapshot.documents.length==0)
//    {
//      return quantitylist;
//    }
//    for(DocumentSnapshot doc in querySnapshot.documents)
//    {
//      quantitylist.add(Quantity.deserialize(doc.data, doc.documentID));
//    }
//    return quantitylist;
//  }
 static Future<void> updateReview(Reviews reviews) async
 {
   await Firestore.instance.collection(Reviews.REVIEWSCOLLECTION)
   .document(reviews.documentId)
   .setData(reviews.serialize());
 }
 
}

